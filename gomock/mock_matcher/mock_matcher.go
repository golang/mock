// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/golang/mock/gomock (interfaces: Matcher)

package mock_gomock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return _m.recorder
}
func (_m *MockMatcher) GomockMethodType(name string) reflect.Type {
	switch name {
	case "Matches":
		return reflect.TypeOf(_m.Matches)
	case "String":
		return reflect.TypeOf(_m.String)
	}
	return nil
}

// Matches mocks base method
func (_m *MockMatcher) Matches(_param0 interface{}) bool {
	ret := _m.ctrl.Call(_m, "Matches", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Matches indicates an expected call of Matches
func (_mr *MockMatcherMockRecorder) Matches(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Matches", arg0)
}

// String mocks base method
func (_m *MockMatcher) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (_mr *MockMatcherMockRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

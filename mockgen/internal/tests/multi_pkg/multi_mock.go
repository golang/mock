// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/golang/mock/mockgen/internal/tests/multi_pkg/pkg_x (interfaces: InterfaceA,InterfaceB)
// Source: github.com/golang/mock/mockgen/internal/tests/multi_pkg/pkg_y (interfaces: InterfaceD)
// Source: github.com/golang/mock/mockgen/internal/tests/multi_pkg (interfaces: InterfaceF)

// Package multi_pkg is a generated GoMock package.
package multi_pkg

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterfaceA is a mock of InterfaceA interface.
type MockInterfaceA struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceAMockRecorder
}

// MockInterfaceAMockRecorder is the mock recorder for MockInterfaceA.
type MockInterfaceAMockRecorder struct {
	mock *MockInterfaceA
}

// NewMockInterfaceA creates a new mock instance.
func NewMockInterfaceA(ctrl *gomock.Controller) *MockInterfaceA {
	mock := &MockInterfaceA{ctrl: ctrl}
	mock.recorder = &MockInterfaceAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceA) EXPECT() *MockInterfaceAMockRecorder {
	return m.recorder
}

// GetA mocks base method.
func (m *MockInterfaceA) GetA(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetA", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetA indicates an expected call of GetA.
func (mr *MockInterfaceAMockRecorder) GetA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetA", reflect.TypeOf((*MockInterfaceA)(nil).GetA), arg0)
}

// MockInterfaceB is a mock of InterfaceB interface.
type MockInterfaceB struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceBMockRecorder
}

// MockInterfaceBMockRecorder is the mock recorder for MockInterfaceB.
type MockInterfaceBMockRecorder struct {
	mock *MockInterfaceB
}

// NewMockInterfaceB creates a new mock instance.
func NewMockInterfaceB(ctrl *gomock.Controller) *MockInterfaceB {
	mock := &MockInterfaceB{ctrl: ctrl}
	mock.recorder = &MockInterfaceBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceB) EXPECT() *MockInterfaceBMockRecorder {
	return m.recorder
}

// GetB mocks base method.
func (m *MockInterfaceB) GetB(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetB", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetB indicates an expected call of GetB.
func (mr *MockInterfaceBMockRecorder) GetB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetB", reflect.TypeOf((*MockInterfaceB)(nil).GetB), arg0)
}

// MockInterfaceD is a mock of InterfaceD interface.
type MockInterfaceD struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceDMockRecorder
}

// MockInterfaceDMockRecorder is the mock recorder for MockInterfaceD.
type MockInterfaceDMockRecorder struct {
	mock *MockInterfaceD
}

// NewMockInterfaceD creates a new mock instance.
func NewMockInterfaceD(ctrl *gomock.Controller) *MockInterfaceD {
	mock := &MockInterfaceD{ctrl: ctrl}
	mock.recorder = &MockInterfaceDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceD) EXPECT() *MockInterfaceDMockRecorder {
	return m.recorder
}

// GetD mocks base method.
func (m *MockInterfaceD) GetD(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetD", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetD indicates an expected call of GetD.
func (mr *MockInterfaceDMockRecorder) GetD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetD", reflect.TypeOf((*MockInterfaceD)(nil).GetD), arg0)
}

// MockInterfaceF is a mock of InterfaceF interface.
type MockInterfaceF struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceFMockRecorder
}

// MockInterfaceFMockRecorder is the mock recorder for MockInterfaceF.
type MockInterfaceFMockRecorder struct {
	mock *MockInterfaceF
}

// NewMockInterfaceF creates a new mock instance.
func NewMockInterfaceF(ctrl *gomock.Controller) *MockInterfaceF {
	mock := &MockInterfaceF{ctrl: ctrl}
	mock.recorder = &MockInterfaceFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceF) EXPECT() *MockInterfaceFMockRecorder {
	return m.recorder
}

// GetF mocks base method.
func (m *MockInterfaceF) GetF(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetF", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetF indicates an expected call of GetF.
func (mr *MockInterfaceFMockRecorder) GetF(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetF", reflect.TypeOf((*MockInterfaceF)(nil).GetF), arg0)
}

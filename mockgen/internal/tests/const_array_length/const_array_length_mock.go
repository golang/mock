// Code generated by MockGen. DO NOT EDIT.
// Source: const_array_length.go

// Package const_array_length is a generated GoMock package.
package const_array_length

import (
	gomock "github.com/golang/mock/gomock"
	consts "github.com/golang/mock/mockgen/internal/tests/const_array_length/consts"
	reflect "reflect"
)

// MockConstArrayLength is a mock of ConstArrayLength interface
type MockConstArrayLength struct {
	ctrl     *gomock.Controller
	recorder *MockConstArrayLengthMockRecorder
}

// MockConstArrayLengthMockRecorder is the mock recorder for MockConstArrayLength
type MockConstArrayLengthMockRecorder struct {
	mock *MockConstArrayLength
}

// NewMockConstArrayLength creates a new mock instance
func NewMockConstArrayLength(ctrl *gomock.Controller) *MockConstArrayLength {
	mock := &MockConstArrayLength{ctrl: ctrl}
	mock.recorder = &MockConstArrayLengthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConstArrayLength) EXPECT() *MockConstArrayLengthMockRecorder {
	return m.recorder
}

// AuxLength mocks base method
func (m *MockConstArrayLength) AuxLength() [consts.C]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuxLength")
	ret0, _ := ret[0].([consts.C]int)
	return ret0
}

// AuxLength indicates an expected call of AuxLength
func (mr *MockConstArrayLengthMockRecorder) AuxLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuxLength", reflect.TypeOf((*MockConstArrayLength)(nil).AuxLength))
}

// PackagePrefixConstLength mocks base method
func (m *MockConstArrayLength) PackagePrefixConstLength() [consts.C]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackagePrefixConstLength")
	ret0, _ := ret[0].([consts.C]int)
	return ret0
}

// PackagePrefixConstLength indicates an expected call of PackagePrefixConstLength
func (mr *MockConstArrayLengthMockRecorder) PackagePrefixConstLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackagePrefixConstLength", reflect.TypeOf((*MockConstArrayLength)(nil).PackagePrefixConstLength))
}

// ConstLength mocks base method
func (m *MockConstArrayLength) ConstLength() [C]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstLength")
	ret0, _ := ret[0].([C]int)
	return ret0
}

// ConstLength indicates an expected call of ConstLength
func (mr *MockConstArrayLengthMockRecorder) ConstLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstLength", reflect.TypeOf((*MockConstArrayLength)(nil).ConstLength))
}

// LiteralLength mocks base method
func (m *MockConstArrayLength) LiteralLength() [3]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiteralLength")
	ret0, _ := ret[0].([3]int)
	return ret0
}

// LiteralLength indicates an expected call of LiteralLength
func (mr *MockConstArrayLengthMockRecorder) LiteralLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiteralLength", reflect.TypeOf((*MockConstArrayLength)(nil).LiteralLength))
}

// SliceLength mocks base method
func (m *MockConstArrayLength) SliceLength() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SliceLength")
	ret0, _ := ret[0].([]int)
	return ret0
}

// SliceLength indicates an expected call of SliceLength
func (mr *MockConstArrayLengthMockRecorder) SliceLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SliceLength", reflect.TypeOf((*MockConstArrayLength)(nil).SliceLength))
}
